module Err (
  -- * Errors
    Err (..)
  , ErrType (..)
  -- * Source information
  , SrcCtx (..)
  )
  where

import Data.Text.Lazy as T

import Env

type SrcPos = (String, Int, Int)

newtype SrcCtx = SrcCtx (Maybe (SrcPos, SrcPos))
                 deriving (Eq, Ord, Show)

-- | An error generated by the compiler.
data Err = Err { -- | The type of the error.
                 _errorType :: ErrType
                 -- | The location associated with the error within the source
                 -- files.
               , _errorLoc :: SrcCtx
                 -- | The stack of scopes within which the error was thrown.
               , _errorParentScopes :: [Name]
                 -- | The text of the error.
               , _errorText :: T.Text
               }
           deriving (Eq, Show)

instance Ord Err where
  Err e1 src1 loc1 txt1 `compare` Err e2 src2 loc2 txt2 =
    (src1 `compare` src2) <>
    (loc1 `compare` loc2) <>
    (txt1 `compare` txt2) <>
    (e1 `compare` e2)

data ErrType = AmbiguousFunctionRefErr
             | AmbiguousProcedureRefErr
             | AmbiguousTopLevelRefErr
             | CompilerErr
             | CyclicErr
             | DeclContextErr
             | InvalidDeclErr
             | MiscErr
             | ModeMismatchErr
             | NotImplementedErr
             | ParseErr
             | TypeErr
             | UnboundFunctionErr
             | UnboundNameErr
             | UnboundProcedureErr
             | UnboundTopLevelErr
             | UnboundTypeErr
             | UnboundVarErr
               deriving (Eq, Ord, Show)
