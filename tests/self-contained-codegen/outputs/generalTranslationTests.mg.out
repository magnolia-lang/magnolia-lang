#include "E.hpp"
#include <cassert>


namespace tests {
namespace self_contained_codegen {
namespace inputs {
namespace generalTranslationTests {
struct P {
    struct _some_f_overloaded_on_return_type {
        template <typename T>
        inline T operator()() {
            T o;
            P::some_f_overloaded_on_return_type0(o);
            return o;
        };
    };

    static P::_some_f_overloaded_on_return_type some_f_overloaded_on_return_type;
private:
    static ExternalImplementationSomeType __ExternalImplementationSomeType;
public:
    typedef ExternalImplementationSomeType::B X;
    typedef ExternalImplementation<P::X>::Y Y;
    struct __mkY {
        P::Y operator()();
    };

    static P::__mkY _mkY;
private:
    static void some_f_overloaded_on_return_type0(P::Y& o);
public:
    struct __+_ {
        P::X operator()(const P::X& lhs, const P::X& rhs);
    };

    static P::__+_ binary_add;
private:
    static ExternalImplementation<P::X> __ExternalImplementation;
public:
    struct _all_statements {
        void operator()(const P::X& x_obs, P::X& x_upd, P::X& x_out);
    };

    static P::_all_statements all_statements;
    struct _call_f_overloaded_on_return_type {
        P::X operator()();
    };

    static P::_call_f_overloaded_on_return_type call_f_overloaded_on_return_type;
    struct _helper_assign {
        void operator()(P::X& x_out);
    };

    static P::_helper_assign helper_assign;
    struct _mkX {
        P::X operator()();
    };

private:
    static ExternalImplementationSomeMoreTypes<P::Y, P::X, P::Y, P::_mkX> __ExternalImplementationSomeMoreTypes;
public:
    static P::_mkX mkX;
private:
    static void some_f_overloaded_on_return_type0(P::X& o);
public:
    typedef ExternalImplementationSomeMoreTypes<P::Y, P::X, P::Y, P::_mkX>::AConcreteType AConcreteType;
};
} // tests
} // self_contained_codegen
} // inputs
} // generalTranslationTests

namespace tests {
namespace self_contained_codegen {
namespace inputs {
namespace generalTranslationTests {
struct P2 {
};
} // tests
} // self_contained_codegen
} // inputs
} // generalTranslationTests
#include "gen/tests/self-contained-codegen/inputs/generalTranslationTests.hpp"


namespace tests {
namespace self_contained_codegen {
namespace inputs {
namespace generalTranslationTests {


    P::_some_f_overloaded_on_return_type P::some_f_overloaded_on_return_type;

    ExternalImplementationSomeType P::__ExternalImplementationSomeType;

    P::Y P::__mkY::operator()() {
        return __ExternalImplementation.mkY();
    };


    P::__mkY P::_mkY;

    void P::some_f_overloaded_on_return_type0(P::Y& o) {
        o = P::_mkY();
    };

    P::X P::__+_::operator()(const P::X& lhs, const P::X& rhs) {
        return __ExternalImplementation.binary_add(lhs, rhs);
    };


    P::__+_ P::binary_add;

    ExternalImplementation<P::X> P::__ExternalImplementation;

    void P::_all_statements::operator()(const P::X& x_obs, P::X& x_upd, P::X& x_out) {
        x_out = x_obs;
        x_out = [=, this]() {
            return P::mkX();
        }();
        P::X x_var_unassigned;
        P::X x_var_assigned = x_obs;
        assert((x_obs) == (x_obs));
        P::helper_assign(x_upd);
        x_out = (x_obs) == (x_obs) ? x_out : x_obs;
        if ((x_obs) == (x_obs))
        {
            ;
        }
        else
        {
            ;
        }
        if ((true) || (false))
        {
            ;
        }
        else
        {
            ;
        }
    };


    P::_all_statements P::all_statements;

    P::X P::_call_f_overloaded_on_return_type::operator()() {
        return P::some_f_overloaded_on_return_type.operator()<X>();
    };


    P::_call_f_overloaded_on_return_type P::call_f_overloaded_on_return_type;

    void P::_helper_assign::operator()(P::X& x_out) {
        x_out = P::mkX();
    };


    P::_helper_assign P::helper_assign;

    P::X P::_mkX::operator()() {
        return __ExternalImplementation.mkX();
    };


    ExternalImplementationSomeMoreTypes<P::Y, P::X, P::Y, P::_mkX> P::__ExternalImplementationSomeMoreTypes;

    P::_mkX P::mkX;

    void P::some_f_overloaded_on_return_type0(P::X& o) {
        o = P::mkX();
    };

} // tests
} // self_contained_codegen
} // inputs
} // generalTranslationTests

namespace tests {
namespace self_contained_codegen {
namespace inputs {
namespace generalTranslationTests {

} // tests
} // self_contained_codegen
} // inputs
} // generalTranslationTests
